<html class="h-100" lang="en">

<head>
    <meta charset="utf-8">

    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="description" content="Keg Cop, a Home Brewing application">
    <meta name="author" content="Lee Bussy">

    <title>Keg Cop</title>

    <link rel="canonical" href="https://www.kegcop.com/">

    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <link rel="manifest" href="site.webmanifest">
    <link rel="mask-icon" href="safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.4.1/cerulean/bootstrap.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css">
    <link rel="stylesheet" href="/common.css">
    <link rel="stylesheet" href="/loader.css">
    <script src="/loader.js"></script>
</head>

<body class="d-flex flex-column h-100">

    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <a class="navbar-brand" href="/">
                <img src="mstile-150x150.png" style="width:25px;height:25px;">
                &nbsp;Keg Cop
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01"
                aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarColor01">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/">Home <span class="sr-only">(current)</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/settings/">Settings</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/help/">Help</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about/">About</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="navbar-brand nav-link active" target="_blank" href="https://docs.kegcop.com">?</a>
                    </li>
                </ul>
            </div>
        </nav>
    </header>

    <main role="main" class="flex-shrink-0">

        <div class="loader" id="loader"></div> <!-- Loading Spinner Container -->

        <div class="container" id="indexApp"> <!-- Container -->

            <div class="card border-dark mb-3"> <!-- Taps Information -->

                <div class="card-header"> <!-- Double Header -->
                    <div class="float-left">
                        <h4><span id="taplistName"></span></h4>
                    </div>
                        <div class="float-right">
                            <h5 id="coolstate" class="text-right alert">
                                <a id="coolstatetooltip" data-toggle="tooltip" data-placement="left" class="no-underline" href="/temps/">
                                    <span id="controlPoint"></span>
                                    <span id="controlTemp"></span>
                                    <span id="tempFormat"></span>
                                </a>
                            </h5>
                        </div>
                    <div class="clearfix"></div>
                </div> <!-- Double Header -->

                <div class="card-body"> <!-- Chart Container -->
                    <canvas id="tapChart"></canvas>
                </div> <!-- Chart Container -->

            </div> <!-- Taps Information -->

        </div> <!-- Container -->

    </main>

    <footer class="footer mt-auto py-3">
        <div class="container">
            <span class="text-muted">Copyright Â© 2019-2020, Lee C. Bussy</span>
        </div>
    </footer>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous">
        </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous">
        </script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous">
        </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"
        integrity="sha384-i+dHPTzZw7YVZOx9lbH5l6lP74sLRtMtwN2XjVqjf3uAGAREAF4LMIUDTWEVs4LI" crossorigin="anonymous">
        </script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.min.js"
        integrity="sha384-fIE8wIddxI8s1yO253uBKjQyxNZ5UuilW9rx7H4ePN7XS7Z9ukIeK+ECX5B8jDAj" crossorigin="anonymous">
        </script>

    <script>
        toggleLoader("on");
        var unloadingState = false;
        var numReq = 3;
        var loaded = 0;
        var imperial;
        var labels = [];
        var percent = [];
        var capacity = [];
        var remaining = [];
        var tapChart;
        var flowReloadTimer = 5000;
        var tempsReloadTimer = 10000;
        // Calibration mode variables
        calValue = 0;
        calLineType = '';

        // Detect unloading state during getJSON
        $(window).bind("beforeunload", function () {
            unloadingState = true;
        });

        // Attach the event after the page loads
        if (window.addEventListener)
            window.addEventListener("load", startLoad, false);
        else if (window.attachEvent)
            window.attachEvent("onload", startLoad);
        else window.onload = startLoad;

        function startLoad() { // Make sure the page is 100% loaded
            if (document.readyState === 'ready' || document.readyState === 'complete') {
                populatePage();
            } else {
                document.onreadystatechange = function () {
                    if (document.readyState == "complete") {
                        populatePage();
                    }
                }
            }
        }

        function populatePage() { // Get page data
            $(document).tooltip({
                'selector': '[data-toggle=tooltip]',
                'placement': 'left',
                'toggleEnabled': true
            });
            populateFlow();
            populateTemps();
            populateConfig();
            pollComplete();
        }

        function populateFlow(callback = null) { // Get flowmeter data
            var url = "/flow/";
            var okToClear = false;
            if (labels.length) { // Clear arrays if we are re-running
                okToClear = true;
            }
            var flow = $.getJSON(url, function () {
            })
                .done(function (flow) {
                    if (okToClear) {
                        labels = [];
                        percent = [];
                        capacity = [];
                        remaining = [];
                    }
                    var numTaps = flow["taps"].length;
                    if (flow.imperial) {
                        imperial = true;
                    } else {
                        imperial = false;
                    }
                    calLineType = ''; // Clear calibration mode
                    try {
                        for (var i = 0; i < numTaps; i++) {
                            if (flow.taps[i].active) {
                                labels.push("Tap " + (i + 1) + ": " + flow.taps[i].name);
                                percent.push(((parseFloat(flow.taps[i].remaining) / parseFloat(flow.taps[i].capacity)) * 100));
                                capacity.push(parseFloat(flow.taps[i].capacity));
                                remaining.push(parseFloat(flow.taps[i].remaining));
                            }
                            if (flow.taps[i].calibrating) { // Tap is calibrating
                                calLineType = 'line';
                                calValue = i;
                            }
                        }
                        if (loaded < numReq) {
                            loaded++;
                        }
                        if (typeof callback == "function") {
                            callback();
                        }
                    }
                    catch {
                        if (!unloadingState) {
                           alert("Unable to parse configuration data from SPIFFS."); 
                        }
                    }
                })
                .fail(function () {
                    if (!unloadingState) {
                        alert("Unable to retrieve configuration data from SPIFFS.");
                    }
                })
                .always(function () {
                    // Can post-process here
                });
        }

        function populateConfig() { // Get configuration settings
            var url = "/config/";
            var config = $.getJSON(url, function () {
            })
                .done(function (config) {
                    try {
                        // Header text
                        var headerText = "Taplist for " + config.copconfig.kegeratorname;
                        if (config.copconfig.breweryname) {
                            headerText += " in " + config.copconfig.breweryname;
                        }
                        $('#taplistName').text(headerText);

                        loaded++;
                    }
                    catch {
                        alert("Unable to parse configuration data from SPIFFS.");
                    }
                })
                .fail(function () {
                    if (!unloadingState) {
                        alert("Unable to retrieve configuration data from SPIFFS.");
                    }
                })
                .always(function () {
                    // Can post-process here
                });
        }

        function populateTemps(callback = null) { // Get configuration settings
            var url = "/sensors/";
            var config = $.getJSON(url, function () {
            })
                .done(function (temps) {
                    try {
                        if (!temps.displaydisabled) {
                            // Set control point display
                            $('#controlPoint').text(temps.sensors[temps.controlpoint].name + ":");
                            $('#controlTemp').text(parseFloat(temps.sensors[temps.controlpoint].value).toFixed(1));

                            // Set F or C
                            if (temps.imperial) {
                                $('#tempFormat').html("&#x2109;");
                            } else {
                                $('#tempFormat').html("&#x2103;");
                            }

                            // Set indicator button
                            switch (temps.status) {
                                case 0: // TSTAT_INACTIVE
                                    clearState();
                                    $("#coolstate").addClass("alert-secondary");
                                    $("#coolstatetooltip").prop("title", "Thermostat is disabled");
                                    break;
                                case 1: // TSTAT_COOL_BEGIN
                                    clearState();
                                    $("#coolstate").addClass("alert-info");
                                    $("#coolstatetooltip").prop("title", "Thermostat is starting to cool");
                                    break;
                                case 2: // TSTAT_COOL_MINOFF
                                    clearState();
                                    $("#coolstate").addClass("alert-danger");
                                    $("#coolstatetooltip").prop("title", "Thermostat is calling for cooling but in minimum off time");
                                    break;
                                case 3: // TSTAT_COOL_ACTIVE
                                    clearState();
                                    $("#coolstate").addClass("alert-primary");
                                    $("#coolstatetooltip").prop("title", "Thermostat is actively cooling");
                                    break;
                                case 4: // TSTAT_IDLE_END
                                    clearState();
                                    $("#coolstate").addClass("alert-warning");
                                    $("#coolstatetooltip").prop("title", "Thermostat is not calling for cooling, mininum off time ending");
                                    break;
                                case 5: // TSTAT_IDLE_MINON
                                    clearState();
                                    $("#coolstate").addClass("alert-success");
                                    $("#coolstatetooltip").prop("title", "Thermostat is not calling for cooling but in minimum on time");
                                    break;
                                case 6: // TSTAT_IDLE_INACTIVE
                                    clearState();
                                    $("#coolstate").addClass("alert-light");
                                    $("#coolstatetooltip").prop("title", "Thermostat is not calling for cooling, in idle mode");
                                    break;
                                case 7: // TSTAT_UNKNOWN
                                    clearState();
                                    $("#coolstate").addClass("alert-light");
                                    $("#coolstatetooltip").prop("title", "Thermostat is in an unknown state");
                                    break;
                                default: // TSTAT_UNKNOWN
                                    clearState();
                                    $("#coolstate").addClass("alert-light");
                                    $("#coolstatetooltip").prop("title", "Thermostat is in an unknown state");
                                    break;
                            }
                        }

                        if (loaded < numReq) {
                            loaded++;
                        }
                        if (typeof callback == "function") {
                            callback();
                        }
                    }
                    catch {
                        if (!unloadingState) {
                            alert("Unable to parse temperature data from SPIFFS.");
                        }
                    }
                })
                .fail(function () {
                    if (!unloadingState) {
                        alert("Unable to retrieve temperature data from SPIFFS.");
                    }
                })
                .always(function () {
                    // Can post-process here
                });
        }

        function clearState() {
            $("#coolstate").removeClass("alert-warning");
            $("#coolstate").removeClass("alert-danger");
            $("#coolstate").removeClass("alert-success");
            $("#coolstate").removeClass("alert-info");
            $("#coolstate").removeClass("alert-primary");
            $("#coolstate").removeClass("alert-secondary");
            $("#coolstate").removeClass("alert-light");         
        }

            function addData(chart, label, data) {
                //chart.data.labels.push(label);
                chart.data.datasets.forEach((dataset) => {
                    dataset.data = data;
                });
                chart.update();
            }

            function removeData(chart) {
                //chart.data.labels.pop();
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.pop();
                });
                chart.update();
            }

        function doChart() { // Draw chart.js chart
            if (tapChart) {
                tapChart.data.datasets.forEach((dataset) => {
                    // Update data
                    dataset.data = [];
                    dataset.data = percent;
                });
                tapChart.options.annotation.annotations.forEach((annotations) => {
                    // Update annotations
                    annotations.type = calLineType;
                    annotations.value = calValue;
                });
                tapChart.update();
            } else {
                var ctx = document.getElementById("tapChart").getContext("2d");

                tapChart = new Chart(ctx, {
                    type: 'horizontalBar',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: percent,
                            borderColor: 'rgba(221, 86, 0, 1)',
                            backgroundColor: 'rgba(221, 86, 0, 0.2)',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        legend: false,
                        responsive: true,

                        title: {
                            display: false
                        },

                        onClick: barClick,

                        tooltips: {
                            displayColors: false,

                            callbacks: {
                                label: toolTip
                            }
                        },

                        scales: {
                            xAxes: [{
                                ticks: {
                                    min: 0,
                                    max: 100,
                                    callback: function (value, index, values) {
                                        return value + "%";
                                    }
                                }
                            }]
                        },

                        annotation: {
                            annotations: [{
                                type: calLineType,
                                mode: 'horizontal',
                                scaleID: 'y-axis-0',
                                value: calValue,
                                borderColor: 'rgb(199, 28, 34)',
                                borderWidth: 4,
                                label: {
                                    enabled: true,
                                    content: "In Calibration Mode"
                                }
                            }]
                        }
                    }
                });
            }
        }

        function toolTip(tooltipItem, data) { // Callback for tool tips
            var index = tooltipItem.index;
            var label = [];

            // Line 1
            var pct = parseFloat(percent[index]).toFixed(1) + '%:';
            label.push(pct);

            // Line 2
            var large = '';
            large += parseFloat(remaining[index]).toFixed(2);
            large += " of ";
            large += parseFloat(capacity[index]).toFixed(2);
            if (imperial) {
                large += " gallons ";
            } else {
                large += " liters ";
            }
            label.push(large);

            // Line 3
            var small = '';
            small += "(";
            if (imperial) {
                small += (parseFloat(remaining[index]) * 128).toFixed(0);
                small += " fl oz remaining)";
            } else {
                small += (parseFloat(remaining[index]) * 1000).toFixed(0);
                small += " ml remaining)";
            }
            label.push(small);

            return label;
        }

        function barClick(event, array) { // Bar click handler
            var tapNum = array[0]._index;
            var url = "/settings/#tap" + tapNum;
            window.open(url, "_self")
        }

        function pollComplete() {
            if (loaded == numReq) {
                finishPage();
            } else {
                setTimeout(pollComplete, 300); // try again in 300 milliseconds
            }
        }

        function flowReload() {
            populateFlow(function callFunction() {
                doChart();
                setTimeout(flowReload, flowReloadTimer);
            });
        }

        function tempsReload() {
            populateTemps(function callFunction() {
                setTimeout(tempsReload, tempsReloadTimer);
            });
        }

        function finishPage() { // Display page
            toggleLoader("off");
            doChart();
            setTimeout(tempsReload, tempsReloadTimer);
            setTimeout(flowReload, flowReloadTimer);
        }

    </script>

</body>

</html>