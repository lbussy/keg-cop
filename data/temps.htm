<html class="h-100" lang="en">

<head>
    <meta charset="utf-8">

    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="description" content="Keg Cop, a Home Brewing application">
    <meta name="author" content="Lee Bussy">

    <title>Keg Cop</title>

    <link rel="canonical" href="https://www.kegcop.com/">

    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <link rel="manifest" href="site.webmanifest">
    <link rel="mask-icon" href="safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.4.1/cerulean/bootstrap.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css">
    <link rel="stylesheet" href="/common.css">
    <link rel="stylesheet" href="/loader.css">
    <script src="/loader.js"></script>
</head>

<body class="d-flex flex-column h-100">

    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <a class="navbar-brand" href="/">
                <img src="mstile-150x150.png" style="width:25px;height:25px;">
                &nbsp;Keg Cop
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01"
                aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarColor01">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link active" href="/settings/">Settings <span class="sr-only">(current)</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/help/">Help</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about/">About</a>
                    </li>
                </ul>
            </div>
        </nav>
    </header>

    <main role="main" class="flex-shrink-0">

        <div class="loader" id="loader"></div> <!-- Loading Spinner Container -->

        <div class="container" id="tempsApp"> <!-- Container -->

            <div class="card border-dark mb-3"> <!-- Temperature Information -->

                <div class="card-header"> <!-- Double Header -->
                    <div class="float-left">
                        <h4><span id="templistName"></span></h4>
                    </div>
                    <div class="float-right">
                        <h5 class="text-right">
                            <a class="no-underline" href="/settings/#tempcontrol">
                                Control point: <span id="controlPoint"></span> Sensor
                            </a>
                        </h5>
                    </div>
                    <div class="clearfix"></div>
                </div> <!-- Double Header -->

                <div class="card-body"> <!-- Chart Container -->
                    <canvas id="tempChart"></canvas>
                </div> <!-- Chart Container -->

            </div> <!-- Temperature Information -->

        </div> <!-- Container -->

    </main>

    <footer class="footer mt-auto py-3">
        <div class="container">
            <span class="text-muted">Copyright © 2019-2020, Lee C. Bussy</span>
        </div>
    </footer>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous">
        </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous">
        </script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous">
        </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"
        integrity="sha384-i+dHPTzZw7YVZOx9lbH5l6lP74sLRtMtwN2XjVqjf3uAGAREAF4LMIUDTWEVs4LI" crossorigin="anonymous">
        </script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.min.js"
        integrity="sha384-fIE8wIddxI8s1yO253uBKjQyxNZ5UuilW9rx7H4ePN7XS7Z9ukIeK+ECX5B8jDAj" crossorigin="anonymous">
        </script>

    <script>
        toggleLoader("on");
        var imperial;
        var loaded = 0;
        var numReq = 2;
        var labels = [];
        var temperatures = [];
        var scaleTemps = [];
        var setpoint = 0;
        var tempChart;
        var chartReloadTimer = 10000;

        // Attach the event after the page loads
        if (window.addEventListener)
            window.addEventListener("load", loadPage, false);
        else if (window.attachEvent)
            window.attachEvent("onload", loadPage);
        else window.onload = loadPage;

        function loadPage() { // Make sure the page is 100% loaded
            if (document.readyState === 'ready' || document.readyState === 'complete') {
                populatePage();
            } else {
                document.onreadystatechange = function () {
                    if (document.readyState == "complete") {
                        populatePage();
                    }
                }
            }
        }

        function populatePage() { // Get page data
            populateTemps();
            populateConfig();
            pollComplete();
        }

        function populateConfig() { // Get configuration settings
            var url = "/config/";
            var config = $.getJSON(url, function () {
            })
                .done(function (config) {
                    try {
                        // Header text
                        var headerText = 'Temperature Sensors for <a class="no-underline" href="/">';
                        headerText += config.copconfig.kegeratorname + '</a>';
                        $('#templistName').html(headerText);

                        if (loaded < numReq) {
                            loaded++;
                        }
                    }
                    catch {
                        alert("Unable to parse configuration data from SPIFFS.");
                    }
                })
                .fail(function () {
                    alert("Unable to retrieve configuration data from SPIFFS.");
                })
                .always(function () {
                    // Can post-process here
                });
        }

        function populateTemps(callback = null) { // Get configuration settings
            var url = "/temperatures/";
            var okToClear = false;
            if (labels.length) { // Clear arrays if we are re-running
                okToClear = true;
            }
            var config = $.getJSON(url, function () {
            })
                .done(function (temps) {
                    try {
                        if (okToClear) {
                            labels = [];
                            temperatures = [];
                            scaleTemps = [];
                        }
                        if (temps.imperial) {
                            imperial = true;
                        } else {
                            imperial = false;
                        }

                        $.each(temps.sensor, function (index, value) {
                            labels.push(index.charAt(0).toUpperCase() + index.slice(1));
                            temperatures.push(parseFloat(value));
                        });

                        $('#controlPoint').text(labels[temps.controlpoint]);

                        setpoint = parseFloat(temps.setting).toFixed(1);
                        setpointLabel = "Setpoint: " + setpoint;
                        if (imperial) {
                            setpointLabel += " ℉";
                        } else {
                            setpointLabel += " ℃";
                        }

                        scaleTemps = temperatures;
                        scaleTemps.push(parseFloat(setpoint));

                        if (loaded < numReq) {
                            loaded++;
                        }
                        if (typeof callback == "function") {
                            callback();
                        }
                    }
                    catch {
                        alert("Unable to parse temperature data from SPIFFS.");
                    }
                })
                .fail(function () {
                    alert("Unable to retrieve temperature data from SPIFFS.");
                })
                .always(function () {
                    // Can post-process here
                });
        }

        function updateScales(chart) {
            var yScale = chart.scales['y-axis-0'];
            chart.options.scales = {
                yAxes: [{
                    display: true,
                    ticks: {
                        min: Math.floor(Math.min.apply(this, scaleTemps) - 2),
                        max: Math.ceil(Math.max.apply(this, scaleTemps) + 1),
                        callback: function (value, index, values) {
                            return value + "°";
                        }
                    }
                }]
            };
            chart.update();
            yScale = chart.scales['y-axis-0'];
        }

        function doChart() { // Draw chart.js chart
            if (tempChart) {
                tempChart.data.datasets.forEach((dataset) => {
                    dataset.data = [];
                    dataset.data = temperatures;
                });
                updateScales(tempChart);
                tempChart.update();
            } else {
                var ctx = document.getElementById("tempChart").getContext("2d");

                tempChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: temperatures,
                            borderColor: 'rgba(221, 86, 0, 1)',
                            backgroundColor: 'rgba(221, 86, 0, 0.2)',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        legend: false,
                        responsive: true,

                        title: {
                            display: false
                        },

                        onClick: barClick,

                        tooltips: {
                            yAlign: 'top',
                            displayColors: false,

                            callbacks: {
                                label: toolTip
                            }
                        },

                        scales: {
                            yAxes: [{
                                display: true,
                                ticks: {
                                    min: Math.floor(Math.min.apply(this, scaleTemps) - 2),
                                    max: Math.ceil(Math.max.apply(this, scaleTemps) + 1),
                                    callback: function (value, index, values) {
                                        return value + "°";
                                    }
                                }
                            }]
                        },

                        annotation: {
                            annotations: [{
                                type: 'line',
                                mode: 'horizontal',
                                scaleID: 'y-axis-0',
                                value: setpoint,
                                borderColor: 'rgb(75, 192, 192)',
                                borderWidth: 4,
                                label: {
                                    enabled: true,
                                    content: setpointLabel
                                }
                            }]
                        }
                    }
                });
            }
        }

        function toolTip(tooltipItem, data) { // Callback for tool tips
            var index = tooltipItem.index;
            var label = [];

            var tempLine = '';
            if (temperatures[index]) {
                tempLine = (temperatures[index]).toFixed(1);
                if (imperial) {
                    tempLine += " ℉";
                } else {
                    tempLine += " ℃";
                }
                label.push(tempLine);
            }

            return label;
        }

        function barClick(event, array) { // Bar click handler
            var tapNum = array[0]._index;
            var url = "/settings/#tempcalibration";
            window.open(url, "_self");
        }

        function pollComplete() {
            if (loaded == numReq) {
                finishPage();
            } else {
                setTimeout(pollComplete, 300); // try again in 300 milliseconds
            }
        }

        function chartReload() {
            populateTemps(function callFunction() {
                doChart();
                setTimeout(chartReload, chartReloadTimer);
            });
        }

        function finishPage() { // Display page
            toggleLoader("off");
            doChart();
            setTimeout(chartReload, chartReloadTimer);
        }
    </script>



</body>

</html>